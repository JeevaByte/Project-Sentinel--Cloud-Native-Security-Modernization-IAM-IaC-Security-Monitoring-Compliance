name: Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: ./infra/terraform
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./infra/terraform
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./infra/terraform
    
    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes,dockerfile
        output_format: sarif
        output_file_path: reports/checkov-results.sarif
        download_external_modules: true
        quiet: true
        soft_fail: false
    
    - name: Run tfsec
      uses: aquasecurity/tfsec-sarif-action@v0.1.4
      with:
        sarif_file: reports/tfsec-results.sarif
        working_directory: ./infra/terraform
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/checkov-results.sarif
    
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/tfsec-results.sarif

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker build -t demo-app:latest ./demos/apps/web-service/
        docker build -t demo-db:latest ./demos/apps/database/
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'demo-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: demo-app:latest
        args: --severity-threshold=high
    
    - name: Sign container images with Cosign
      if: github.event_name != 'pull_request'
      run: |
        # Install cosign
        curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign
        
        # Sign images (keyless signing)
        cosign sign --yes demo-app:latest
        cosign sign --yes demo-db:latest

  kubernetes-security:
    name: Kubernetes Security Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Validate Kubernetes manifests
      run: |
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs kubectl apply --dry-run=client -f
    
    - name: Run Polaris for Kubernetes best practices
      run: |
        # Install Polaris
        curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz | tar xz
        sudo mv polaris /usr/local/bin/
        
        # Run Polaris audit
        polaris audit --audit-path k8s/ --format json > polaris-results.json
    
    - name: Upload Polaris results
      uses: actions/upload-artifact@v3
      with:
        name: polaris-results
        path: polaris-results.json

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [infrastructure-security, container-security, kubernetes-security]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r compliance/requirements.txt
    
    - name: Run compliance checks
      run: |
        python compliance/compliance-engine.py --framework cis --framework nist
    
    - name: Generate compliance report
      run: |
        python compliance/generate-report.py --output compliance-report.html
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.html

  deploy-security-stack:
    name: Deploy Security Stack
    runs-on: ubuntu-latest
    needs: [infrastructure-security, container-security, kubernetes-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kind
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: sentinel-security
        config: k8s/kind-config.yaml
    
    - name: Deploy security stack
      run: |
        ./scripts/deploy-security-stack.sh
    
    - name: Run security tests
      run: |
        ./scripts/run-security-tests.sh
    
    - name: Cleanup
      if: always()
      run: |
        kind delete cluster --name sentinel-security